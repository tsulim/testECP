AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ResourceName:
    Description: All resource name origin
    Type: String
    Default: dev-artion
    AllowedValues: [dev-artion,artion]
    ConstraintDescription: Accepted values are dev-artion/artion. Default is dev-artion.
  InstanceType:
    Description: Allowed instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t3.micro
    ConstraintDescription: Accepted values are t1.micro t2.micro or t3.micro. Default is t2.micro.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "Can contain only ASCII characters."
  AnywayLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
  AWSInstanceTypeArch:
    t1.micro:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
  AWSRegionArchAMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
  AWSEnvironmentType:
    dev-artion: 
      Env: dev
    prod: 
      Env: prod

Resources:
  ArTionVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-VPC
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
  
  ArTionPublicSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Sub
          - ${region}a
          - region: !Ref "AWS::Region"
      MapPublicIpOnLaunch: true
      VpcId: !Ref ArTionVpc
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-subnet-public
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
    DependsOn: 
      - ArTionVpc

  ArTionPrivateSubnet: 
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Sub
          - ${region}a
          - region: !Ref "AWS::Region"
      VpcId: !Ref ArTionVpc
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-subnet-private
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
    DependsOn: 
      - ArTionVpc
  
  ArTionElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags: 
        - Key: Name
          Value: !Sub ${ResourceName}-elasticip
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]

  ArTionIGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${ResourceName}-igw
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]

  ArTionVPCAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId : !Ref ArTionIGW
      VpcId : !Ref ArTionVpc
    DependsOn:
      - ArTionIGW
      - ArTionVpc
  
  ArTionNAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ArTionElasticIP.AllocationId
      SubnetId: !Ref ArTionPublicSubnet
      Tags: 
        - Key: Name
          Value: !Sub ${ResourceName}-NAT
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
    DependsOn:
      - ArTionElasticIP
      - ArTionPublicSubnet
  
  
  ArTionPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${ResourceName}-route-table-public
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
      VpcId: !Ref ArTionVpc
    DependsOn: 
    - ArTionVpc
  
  ArTionPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: "Name"
          Value: !Sub ${ResourceName}-route-table-private
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
      VpcId: !Ref ArTionVpc
    DependsOn: 
      - ArTionVpc

  ArTionRTPublicIGWAssociation:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref ArTionIGW
      RouteTableId: !Ref ArTionPublicRouteTable
    DependsOn: 
      - ArTionIGW
      - ArTionPublicRouteTable

  LabRTPrivateNATssociation:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref ArTionNAT
      RouteTableId: !Ref ArTionPrivateRouteTable
    DependsOn: 
      - ArTionNAT
      - ArTionPrivateRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable port 22 and 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AnywayLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AnywayLocation

  BucketUsers:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourceName}-bucket-users
      VersioningConfiguration:
        "Status": "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-bucket-users
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
  BucketUsersPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref BucketUsers
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !GetAtt BucketUsers.Arn
            Principal: '*'
    DependsOn: BucketUsers
  
  BucketNFTs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourceName}-bucket-nfts
      VersioningConfiguration:
        "Status": "Enabled"
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-bucket-nfts
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
  BucketNFTsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref BucketNFTs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !GetAtt BucketNFTs.Arn
            Principal: '*'
    DependsOn: BucketNFTs

  DynamoDBUsers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Genre
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Genre
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-dynamodb-users
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
  
  DynamoDBNFTs:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Genre
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Genre
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-dynamodb-nfts
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]

  DynamoDBNFTsDetails:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Sub ${ResourceName}-dynamodb-nfts-details
        - Key: Environment
          Value: !FindInMap [ AWSEnvironmentType, !Ref ResourceName, Env ]
  





  